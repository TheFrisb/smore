"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

import firebase_admin
from decouple import Csv, config
from firebase_admin import credentials

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_URL = config("DJANGO_BASE_URL")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DJANGO_DEBUG_ENABLED", default=False, cast=bool)

ALLOWED_HOSTS = config("DJANGO_ALLOWED_HOSTS", cast=Csv())

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    # Third party apps
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_standardized_errors",
    "adminsortable2",
    "solo",
    "rosetta",
    "django_ckeditor_5",
    "django_filters",
    "django_crontab",
    "model_utils",
    # Local apps
    "accounts",
    "core",
    "payments",
    "facebook",
    "scripts",
    "authentication",
    "ai_assistant",
    "logs_observation",
    "notifications",
    "subscriptions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Cors Middleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.GeoIpSwitzerlandDetector",
    "core.middleware.ErrorLoggingMiddleware",
    # "core.middleware.EmailVerificationMiddleware"
]

if DEBUG:
    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    INTERNAL_IPS = config("DJANGO_INTERNAL_IPS", cast=Csv())

# Cors Configuration
# CORS_ALLOWED_ORIGINS = config("DJANGO_CORS_ALLOWED_ORIGINS", cast=Csv())

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DJANGO_POSTGRES_DATABASE_NAME"),
        "USER": config("DJANGO_POSTGRES_DATABASE_USER"),
        "PASSWORD": config("DJANGO_POSTGRES_DATABASE_PASSWORD"),
        "HOST": config("DJANGO_POSTGRES_DATABASE_HOST"),
        "PORT": config("DJANGO_POSTGRES_DATABASE_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Rest Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler",
}

# JWT Configuration
SIMPLE_JWT = {
    "SIGNING_KEY": config("DJANGO_JWT_SIGNING_KEY"),
    "ACCESS_TOKEN_LIFETIME": timedelta(
        hours=config("DJANGO_JWT_ACCESS_TOKEN_EXPIRATION_HOURS", cast=int)
    ),  # Access token lifetime
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=config("DJANGO_JWT_REFRESH_TOKEN_EXPIRATION_DAYS", cast=int)
    ),  # Refresh token lifetime
    "ROTATE_REFRESH_TOKENS": True,  # Rotate refresh tokens
    "BLACKLIST_AFTER_ROTATION": True,  # Blacklist old refresh tokens
    "UPDATE_LAST_LOGIN": True,  # Update last login time
    "USER_ID_FIELD": "id",  # Use user ID in the token
    "USER_ID_CLAIM": "user_id",  # Claim name for user ID
}

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[{asctime}] {levelname} {module}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs" / "django.log",
            "maxBytes": 10 * 1024 * 1024,  # 10 MB
            "backupCount": 200,
            "formatter": "simple",
        },
        "cron_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs" / "cron.log",
            "maxBytes": 10 * 1024 * 1024,  # 10 MB
            "backupCount": 200,
            "formatter": "simple",
        },
    },
    "loggers": {
        "": {  # Root logger for everything else, including Django's default logs
            "handlers": ["console", "file"],
            "level": config("DJANGO_LOG_LEVEL", default="INFO"),
            "propagate": True,
        },
        "cron": {  # Separate logger for cron jobs
            "handlers": ["cron_file"],
            "level": config("DJANGO_LOG_LEVEL", default="INFO"),
            "propagate": False,  # Do not propagate to root logger
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

USE_I18N = True
LANGUAGE_CODE = "en-us"
LANGUAGES = [
    ("en", "English"),
    ("el", "Greek"),
    ("it", "Italian"),
    ("fr", "French"),
    ("de", "German"),
]
LOCALE_PATHS = [BASE_DIR / "locale"]

ROSETTA_ENABLE_TRANSLATION_SUGGESTIONS = True

TIME_ZONE = "UTC"
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_URL = "static/"
MEDIA_URL = "media/"

MEDIA_ROOT = BASE_DIR / "media"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "accounts.User"

# Stripe configuration
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET_KEY = config("STRIPE_WEBHOOK_SECRET_KEY")

# MailJet Configuration
MAILJET_API_KEY = config("MAILJET_API_KEY")
MAILJET_SECRET_KEY = config("MAILJET_SECRET_KEY")

# Google OAUTH Configuration
GOOGLE_OAUTH_CLIENT_ID = config("GOOGLE_OAUTH_CLIENT_ID")

# Facebook Pixel Configuration
FACEBOOK_PIXEL_DATASET_ID = config("FACEBOOK_PIXEL_DATASET_ID")
FACEBOOK_PIXEL_ACCESS_TOKEN = config("FACEBOOK_PIXEL_ACCESS_TOKEN")
FACEBOOK_PIXEL_SEND_EVENTS = config(
    "FACEBOOK_PIXEL_SEND_EVENTS", default=True, cast=bool
)

# RapidAPI Configuration
RAPIDAPI_SOCCER_HOST = config("RAPIDAPI_SOCCER_HOST")
RAPIDAPI_SOCCER_KEY = config("RAPIDAPI_SOCCER_KEY")
RAPIDAPI_BASKETBALL_HOST = config("RAPIDAPI_BASKETBALL_HOST")
RAPIDAPI_BASKETBALL_KEY = config("RAPIDAPI_BASKETBALL_KEY")
RAPIDAPI_NHL_HOST = config("RAPIDAPI_NHL_HOST")
RAPIDAPI_NHL_KEY = config("RAPIDAPI_NHL_KEY")

# OpenAI Configuration
OPENAI_API_KEY = config("OPENAI_API_KEY")

# CkEditor 5 Configuration
CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": {
            "items": [
                # "heading",
                "|",
                "bold",
                "italic",
                "link",
                "bulletedList",
                "numberedList",
                "blockQuote",
                # "imageUpload",
            ],
        }
    },
}

# Define a constant in settings.py to specify file upload permissions
CKEDITOR_5_FILE_UPLOAD_PERMISSION = (
    "staff"  # Possible values: "staff", "authenticated", "any"
)

# Mobile application related configuration
MOBILE_APP_PACKAGE_NAME = config("MOBILE_APP_PACKAGE_NAME")
MOBILE_PREDICTION_PRODUCT_ID = config("MOBILE_PREDICTION_PRODUCT_ID")

GOOGLE_SERVICE_ACCOUNT_KEY_PATH = config("GOOGLE_SERVICE_ACCOUNT_KEY_PATH")

# Cron job configuration
CRONJOBS = [
    ("*/20 * * * *", "core.cron.update_scores"),
    ("0 3 * * *", "core.cron.load_matches"),
    ("0 0 * * *", "core.cron.update_league_season_year"),
    ("0 */3 * * *", "core.cron.update_standings"),
    ("*/10 * * * *", "notifications.cron.send_basketball_daily_picks_notification"),
    ("*/10 * * * *", "notifications.cron.send_soccer_daily_picks_notification"),
    ("*/10 * * * *", "notifications.cron.mark_soccer_notifications_as_not_important"),
    (
        "*/10 * * * *",
        "notifications.cron.mark_basketball_notifications_as_not_important",
    ),
    (
        "0 0 * * *",
        "notifications.cron.delete_older_notifications",
    ),
]

GEOIP_PATH = BASE_DIR / "geoip.mmdb"

# RevenueCat Configuration
REVENUECAT_TOKEN = config("REVENUECAT_BEARER_TOKEN")
REVENUECAT_API_SECRET_KEY = config("REVENUECAT_API_SECRET_KEY")
REVENUECAT_PROJECT_ID = config("REVENUECAT_PROJECT_ID")

GOOGLE_MOBILE_CLIENT_ID = config("GOOGLE_MOBILE_CLIENT_ID")

APPLE_CLIENT_ID = config("APPLE_CLIENT_ID")
APPLE_SERVICE_KEY_ID = config("APPLE_SERVICE_KEY_ID")
APPLE_TEAM_ID = config("APPLE_TEAM_ID")
APPLE_REDIRECT_URI = config("APPLE_REDIRECT_URI")
APPLE_SIGN_IN_KEY_PATH = Path(config("APPLE_SIGN_IN_KEY_PATH"))

# Firebase Admin SDK Initialization
cred = credentials.Certificate(config("FIREBASE_ADMIN_SDK_CREDENTIALS_PATH"))
firebase_admin.initialize_app(cred)
