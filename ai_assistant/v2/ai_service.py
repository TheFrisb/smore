import logging

from langchain_core.messages import HumanMessage

from ai_assistant.v2.agent import agent_executor

logger = logging.getLogger(__name__)


class AiService:
    def __init__(self):
        self.agent = agent_executor

    def run(self, query: str) -> str:
        """
        Run the AI agent with the provided query and return the response.

        :param query: The user's query to be processed by the AI agent.
        :return: The response generated by the AI agent.
        """
        message = self._get_message_list(query)

        dict = {
            "messages": message,
        }

        response = self.agent.invoke(dict)

        ai_response = self._extract_response(response)

        return ai_response

    def _parse_query(self, query: str) -> HumanMessage:
        """
        Parse the query into a HumanMessage format.

        :param query: The user's query.
        :return: A HumanMessage object containing the query.
        """
        return HumanMessage(content=query)

    def _get_message_list(self, query: str) -> list[HumanMessage]:
        """
        Convert the query into a list of HumanMessage objects.

        :param query: The user's query.
        :return: A list containing a single HumanMessage object with the query.
        """
        return [self._parse_query(query)]

    def _extract_response(self, response: dict) -> str:
        """
        Extract the AI response from the agent's response dictionary.

        :param response: The response dictionary returned by the agent.
        :return: The AI's response as a string.
        """
        message = response["messages"][-1].content

        return message
